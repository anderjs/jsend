import React from "react";
import { classes } from "./styles";
import type { BoxProps } from "./types";


export const Box: React.FC<BoxProps> = React.memo((props) => {
  const {
    blur,
    clear,
    color,
    top,
    left,
    right,
    float,
    bottom,
    scale,
    width,
    height,
    margin,
    padding,
    display,
    children,
    position,
    className,
    container,
    insetY,
    insetX,
    scaleY,
    scaleX,
    zIndex,
    maxWidth,
    maxHeight,
    borderBox,
    whiteSpace,
    wordBreak,
    ringColor,
    ringOfsset,
    ringWidth,
    textAlign,
    fullWidth,
    fullHeight,
    textOverflow,
    textTransform,
    textDecoration,
    marginY,
    marginX,
    paddingX,
    paddingY,
    marginTop,
    marginLeft,
    marginRight,
    marginBottom,
    minWidth,
    minHeight,
    paddingTop,
    paddingLeft,
    paddingRight,
    paddingBottom,
    minWidthScreen,
    minHeightScreen,
    maxWidthScreen,
    maxHeightScreen,
    visibility,
    borderStyle,
    borderWidth,
    breakAfter,
    breakBefore,
    breakInside,
    brightness,
    borderRadius,
    opacity,
    onHover,
    select,
    rotate,
    translate,
    lineHeight,
    borderColor,
    borderBottom,
    borderLeft,
    borderRight,
    borderTop,
    backgroundColor,
    ...args
  } = props;

  /**
   * @description
   * Optimizing assets for building the component.
   */
  const classNames = React.useMemo(
    () =>
      classes({
        blur,
        clear,
        color,
        top,
        left,
        right,
        float,
        bottom,
        scale,
        width,
        height,
        margin,
        padding,
        display,
        children,
        position,
        className,
        container,
        insetY,
        insetX,
        scaleY,
        scaleX,
        zIndex,
        maxWidth,
        maxHeight,
        borderBox,
        whiteSpace,
        wordBreak,
        ringColor,
        ringOfsset,
        ringWidth,
        textAlign,
        fullWidth,
        fullHeight,
        textOverflow,
        textTransform,
        textDecoration,
        marginY,
        marginX,
        paddingX,
        paddingY,
        marginTop,
        marginLeft,
        marginRight,
        marginBottom,
        minWidth,
        minHeight,
        paddingTop,
        paddingLeft,
        paddingRight,
        paddingBottom,
        visibility,
        borderStyle,
        borderWidth,
        breakAfter,
        breakBefore,
        breakInside,
        borderBottom,
        borderLeft,
        borderRight,
        borderTop,
        onHover,
        select,
        rotate,
        translate,
        brightness,
        lineHeight,
        borderRadius,
        borderColor,
        minWidthScreen,
        maxWidthScreen,
        maxHeightScreen,
        minHeightScreen,
        backgroundColor,
        opacity,
      }),
    [
      blur,
      clear,
      color,
      top,
      left,
      right,
      float,
      bottom,
      scale,
      width,
      height,
      margin,
      padding,
      display,
      children,
      position,
      className,
      container,
      insetY,
      insetX,
      scaleY,
      scaleX,
      zIndex,
      maxWidth,
      maxHeight,
      borderBox,
      whiteSpace,
      wordBreak,
      ringColor,
      ringOfsset,
      ringWidth,
      textAlign,
      fullWidth,
      fullHeight,
      textOverflow,
      textTransform,
      textDecoration,
      marginY,
      marginX,
      paddingX,
      paddingY,
      marginTop,
      marginLeft,
      marginRight,
      marginBottom,
      minWidth,
      minHeight,
      paddingTop,
      paddingLeft,
      paddingRight,
      paddingBottom,
      visibility,
      borderStyle,
      borderWidth,
      breakAfter,
      breakBefore,
      breakInside,
      onHover,
      select,
      rotate,
      translate,
      brightness,
      lineHeight,
      borderColor,
      borderRadius,
      borderBottom,
      borderRight,
      borderLeft,
      borderTop,
      minWidthScreen,
      maxWidthScreen,
      maxHeightScreen,
      minHeightScreen,
      backgroundColor,
      opacity,
    ]
  );

  if (props?.as) {
    return React.createElement(props.as ?? "div", {
      children,
      className: classNames,
    });
  }

  return (
    <div {...args} className={classNames}>
      {children}
    </div>
  );
});
